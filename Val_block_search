import os
from collections import defaultdict
import math

LABEL_DIR = '/home/student2/Documents/Datasets/View_of_Delft_dataset_PUBLIC/view_of_delft_PUBLIC/radar/training/label_2_edited'  # Update this
CLASSES = ['Car', 'Pedestrian', 'Cyclist', 'rider', 'bicycle', 'moped_scooter', 'motor', 'ride_other', 'bicycle_rack']

# Load all IDs
with open('/home/student2/Documents/Datasets/View_of_Delft_dataset_PUBLIC/PointPillars-main_dup_less_classes/Ids_shortened.txt', 'r') as f:
    ids = [line.strip() for line in f]

block_size = 1000
num_blocks = math.ceil(len(ids) / block_size)

for block_idx in range(num_blocks):
    start = block_idx * block_size
    end = min((block_idx + 1) * block_size, len(ids))
    block_ids = ids[start:end]
    
    class_counts = defaultdict(int)
    
    for id_ in block_ids:
        label_path = os.path.join(LABEL_DIR, f"{id_}.txt")
        if not os.path.exists(label_path):
            continue
        with open(label_path, 'r') as lf:
            for line in lf:
                cls_name = line.strip().split()[0]
                if cls_name in CLASSES:
                    class_counts[cls_name] += 1

    print(f"\nðŸ“¦ Block {block_idx} (frames {start} to {end - 1}):")
    for cls in CLASSES:
        print(f"{cls:<15}: {class_counts[cls]}")